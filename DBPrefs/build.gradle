apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'

android {
    compileSdkVersion defaultCompileSdkVersion

    defaultConfig {
        minSdkVersion defaultMinSdkVersion
        targetSdkVersion defaultTargetSdkVersion
        versionCode getGitCommitCount()
        versionName getVersionName()

        buildConfigField "String", "GIT_COMMIT_SHA1", "\"" + getLatestGitHash() + "\""
        buildConfigField "String", "GIT_COMMIT_URL", "\"" + getGitCommitUrl() + "\""
        buildConfigField "String", "GIT_REPO_URL", "\"" + getGitRepoUrl() + "\""
        buildConfigField "String", "GIT_TAG_URL", "\"" + getGitRepoUrl() + "/tags" + "\""
        buildConfigField "String", "JITPACK_BUILD_URL", "\"" + getJitpackBuildUrl() + "\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // For Instrumentation Unit testing
        consumerProguardFile('proguard-rules.pro')
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.google.code.gson:gson:2.8.6'

    //noinspection GradleDependency
    implementation "com.github.hannesa2:cwac-saferoom:1.2.1.1"
    implementation "androidx.room:room-runtime:$room"
    kapt "androidx.room:room-compiler:2.2.6"
    implementation "androidx.room:room-rxjava2:$room"

    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

    lintPublish project(':DBPrefs-lint')

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation "androidx.room:room-testing:$room"
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
}

dokka {
    moduleName = 'DbPreferences'
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"

    // List of files with module and package documentation
    // http://kotlinlang.org/docs/reference/kotlin-doc.html#module-and-package-documentation
    includes = ['README.md']

    // Use to include or exclude non public members.
    includeNonPublic = false

    // Do not output deprecated members. Applies globally, can be overridden by packageOptions
    skipDeprecated = true

    // Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions
    reportUndocumented = true

    skipEmptyPackages = true // Do not create index pages for empty packages
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
    archiveName = "javadoc.jar"
}

artifacts {
    archives javadocJar
}

private static def getGitCommitCount() {
    try {
        return 'git rev-list --first-parent --count HEAD'.execute().text.trim() as Integer
    }
    catch (ignored) {
        return 0
    }
}

private static def getLatestGitHash() {
    try {
        return 'git rev-parse --short HEAD'.execute().text.trim()
    }
    catch (ignored) {
        return null
    }
}

static def getCreateTime() {
    def process = "date +%F".execute()
    return process.text.toString().trim()
}

static private def getVersionName() {
    println "Version: " + getCreateTime() + "." + getGitCommitCount() + "-" + getLatestGitHash()
    return getCreateTime() + "." + getGitCommitCount() + "-" + getLatestGitHash()
}

static def getGitCommitUrl() {
    return getGitRepoUrl() + "/commit/" + getLatestGitHash()
}

static def getGitRepoUrl() {
    def process = "git remote get-url origin --push".execute()
    return process.text.toString().replace(".git", "").trim()
}

static def getJitpackBuildUrl() {
    def process = ("git describe --exact-match " + getLatestGitHash() + " 2>/dev/null | echo noTag").execute()
    return getGitRepoUrl().replace("https://github.com", "https://jitpack.io/com/github") + "/" + process.text.toString().replace("noTag", "").trim() + "/build.log"
}